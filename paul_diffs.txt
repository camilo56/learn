diff --git a/base-station/gui/src/components/person-detection.vue b/base-station/gui/src/components/person-detection.vue
index e0a18372..527ee108 100644
--- a/base-station/gui/src/components/person-detection.vue
+++ b/base-station/gui/src/components/person-detection.vue
@@ -48,8 +48,8 @@ const SCOPE_HEIGHT = 2.5
 const MOVE_RETICLE = false //if set to true, Reticle will move around person, else person moves reticle stay in center
 const MESH_SCALE_FACTOR = 6
 //Scale factors that map hitpoints from model space to meter space
-const PERSON_WIDTH_IN_METERS = 0.65
-const PERSON_HEIGHT_IN_METERS =1.895 //model is slightly shorter than mannequin. so width is nearly accurate. height is off a little more
+const PERSON_WIDTH_IN_METERS = 0.60
+const PERSON_HEIGHT_IN_METERS =1.785 //model is slightly shorter than mannequin. so width is nearly accurate. height is off a little more
 
 
 
@@ -605,11 +605,11 @@ export default{
 			if(this.person){
 				//Note mesh sits  on xz plane
 				let extent = this.person.rootMesh.getBoundingInfo().boundingBox.extendSize
-				let modelSize = extent.scale(2*MESH_SCALE_FACTOR).z
+				extent = extent.scale(2*MESH_SCALE_FACTOR)
 				//Meters to model space
-				this.person.rootMesh.position.x = (-x *modelSize / PERSON_WIDTH_IN_METERS )
-				this.person.rootMesh.position.z = -modelSize*1.25 //move model down such that origin is about head
-				this.person.rootMesh.position.z += (-y *  modelSize / PERSON_HEIGHT_IN_METERS )
+				this.person.rootMesh.position.x = ( x *extent.x / PERSON_WIDTH_IN_METERS )
+				this.person.rootMesh.position.z = -extent.z*1.25 //move model down such that origin is about head
+				this.person.rootMesh.position.z += (-y * extent.z / PERSON_HEIGHT_IN_METERS )
 				
 				this.person.rootMesh.position.scale( Math.abs(this.camera.y - this.person.rootMesh.position.y) )
 				
